//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "auction_results")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub listing_id: i32,
    pub winning_bid_id: i32,
    pub winning_user_id: i32,
    pub deleted_at: Option<DateTime>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::bids::Entity",
        from = "Column::WinningBidId",
        to = "super::bids::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Bids,
    #[sea_orm(
        belongs_to = "super::listings::Entity",
        from = "Column::ListingId",
        to = "super::listings::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Listings,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::WinningUserId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::bids::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Bids.def()
    }
}

impl Related<super::listings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Listings.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
